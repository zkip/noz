# This workflow will build and push a new container image to Alibaba Cloud Container Registry (ACR),
# and then will deploy it to Alibaba Cloud Container Service for Kubernetes (ACK), when a release is created.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ACR repository to store your container images.
#    You can use ACR EE instance for more security and better performance.
#    For instructions see https://www.alibabacloud.com/help/doc-detail/142168.htm
#
# 2. Create an ACK cluster to run your containerized application.
#    You can use ACK Pro cluster for more security and better performance.
#    For instructions see https://www.alibabacloud.com/help/doc-detail/95108.htm
#
# 3. Store your AccessKey pair in GitHub Actions secrets named `ACCESS_KEY_ID` and `ACCESS_KEY_SECRET`.
#    For instructions on setting up secrets see: https://developer.github.com/actions/managing-workflows/storing-secrets/
#
# 4. Change the values for the REGION_ID, REGISTRY, NAMESPACE, IMAGE, ACK_CLUSTER_ID, and ACK_DEPLOYMENT_NAME.
#

name: Build and Deploy to ACK

on:
  release:
    types: [created]

  workflow_dispatch:

# Environment variables available to all jobs and steps in this workflow.
env:
  REGION_ID: cn-hongkong
  REGISTRY: registry.cn-hongkong.aliyuncs.com
  NAMESPACE: zkip
  IMAGE: noz
  TAG: ${{ github.sha }}

jobs:
  ready:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Login to ACR
      - name: Login to ACR with the AccessKey pair
        uses: aliyun/acr-login@v1
        with:
          region-id: "${{ env.REGION_ID }}"
          access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
          access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"

      # Transfter ACR credential file
      - name: Transfer files to target
        run: |
          echo "${{ secrets.CLUSTER_CREDENTIAL }}" >> id_rsa && chmod 600 id_rsa
          mkdir -p ~/.ssh && echo "StrictHostKeyChecking=no" >> ~/.ssh/config
          scp -i id_rsa -r ${{ env.DOCKER_CONFIG }}/config.json root@${{ secrets.CLUSTER_HOST }}:/root/docker-config.json

      # share ACR credential file
      - name: Upload ACR credential
        uses: actions/upload-artifact@v2
        with:
          name: ACR-credential
          path: "${{ env.DOCKER_CONFIG }}/config.json"

      # share cluster credential file
      - name: Upload cluster credential
        uses: actions/upload-artifact@v2
        with:
          name: cluster-credential
          path: id_rsa

  build-and-push:
    runs-on: ubuntu-latest
    environment: production
    needs: [ready]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get docker credential file
        uses: actions/download-artifact@v2
        with:
          name: ACR-credential
          path: docker-config.json

      - name: Build Image
        run: |
          docker build --tag "$REGISTRY/$NAMESPACE/$IMAGE:$TAG" .

      - name: Push Image
        run: |
          docker --config docker-config.json push "$REGISTRY/$NAMESPACE/$IMAGE:$TAG"

  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: [build-and-push]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Credential
        uses: actions/download-artifact@v2
        with:
          name: cluster-credential

      - name: Prepare an appropriate connection environment
        run: |
          mkdir -p ~/.ssh && echo "StrictHostKeyChecking=no" >> ~/.ssh/config

      - name: Pull image
        run: |
          ssh -i id_rsa root@${{ secrets.CLUSTER_HOST }} "docker --config docker-config.json pull $REGISTRY/$NAMESPACE/$IMAGE:$TAG"
      # # Buid and push image to ACR
      # - name: Build and push image to ACR
      #   run: |
      #     docker build --tag "$REGISTRY/$NAMESPACE/$IMAGE:$TAG" .
      #     docker push "$REGISTRY/$NAMESPACE/$IMAGE:$TAG"
      # # Scan image in ACR
      # - name: Scan image in ACR
      #   uses: aliyun/acr-scan@v1
      #   with:
      #     region-id: "${{ env.REGION_ID }}"
      #     access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
      #     access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
      #     repository: "${{ env.NAMESPACE }}/${{ env.IMAGE }}"
      #     tag: "${{ env.TAG }}"
  # deploy:
  #   runs-on: ubuntu-latest
  #   environment: production
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
